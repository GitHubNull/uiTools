name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml
          echo "Build completed. Listing target directory contents:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force target/
          else
            ls -la target/
          fi

      - name: Extract release notes
        run: |
          echo "## What's Changed" > RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^ 2>/dev/null || git rev-list --max-parents=0 HEAD)..$(git describe --tags --abbrev=0) >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: uiTools-jar
          path: target/uiTools-*.jar
          if-no-files-found: error

  build-native-packages:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Build with Maven and create native package
        shell: bash
        run: |
          # Build the project
          mvn -B package --file pom.xml
          
          # Create a directory for jpackage output
          mkdir -p native-package
          
          # Get the OS-specific package type and app name
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            PACKAGE_TYPE="deb"
            APP_NAME="uiTools"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PACKAGE_TYPE="dmg"
            APP_NAME="uiTools"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            PACKAGE_TYPE="exe"
            APP_NAME="uiTools"
          fi
          
          echo "Creating package for $RUNNER_OS with type $PACKAGE_TYPE"
          
          # Use jpackage to create native installer
          jpackage \
            --input target \
            --name "$APP_NAME" \
            --app-version "${GITHUB_REF_NAME#v}" \
            --main-class org.oxff.Main \
            --main-jar $(basename target/uiTools-*.jar) \
            --type "$PACKAGE_TYPE" \
            --dest native-package \
            --icon src/main/resources/app-icon.ico || echo "jpackage failed, possibly due to missing icon"
          
          echo "Native package created. Contents:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force native-package/ || echo "native-package directory not found"
          else
            ls -la native-package/ || echo "native-package directory not found"
          fi

      - name: List files for upload
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force
          else
            ls -la
          fi
          echo "Target directory:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force target/ || echo "Target directory not found"
          else
            ls -la target/ || echo "Target directory not found"
          fi
          echo "Native package directory:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force native-package/ || echo "Native package directory not found"
          else
            ls -la native-package/ || echo "Native package directory not found"
          fi

      - name: Upload native package artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: native-package-${{ runner.os }}
          path: native-package/**
          if-no-files-found: ignore

  release:
    needs: [build, build-native-packages]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: uiTools-jar

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Debug downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          find downloaded-artifacts -type f -print || echo "No files found in downloaded-artifacts"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Recurse -Force downloaded-artifacts || echo "Cannot list downloaded-artifacts directory"
          else
            ls -laR downloaded-artifacts || echo "Cannot list downloaded-artifacts directory"
          fi

      - name: Organize downloaded artifacts
        run: |
          # Create directories for each platform
          mkdir -p linux-package macos-package windows-package
          
          # Find and move artifacts
          find downloaded-artifacts -name "*.deb" -exec mv {} linux-package/ \; 2>/dev/null || echo "No .deb files found"
          find downloaded-artifacts -name "*.dmg" -exec mv {} macos-package/ \; 2>/dev/null || echo "No .dmg files found"
          find downloaded-artifacts -name "*.exe" -exec mv {} windows-package/ \; 2>/dev/null || echo "No .exe files found"
          
          echo "Organized artifacts:"
          echo "Linux packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force linux-package/ || echo "No Linux packages"
          else
            ls -la linux-package/ || echo "No Linux packages"
          fi
          echo "macOS packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force macos-package/ || echo "No macOS packages"
          else
            ls -la macos-package/ || echo "No macOS packages"
          fi
          echo "Windows packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force windows-package/ || echo "No Windows packages"
          else
            ls -la windows-package/ || echo "No Windows packages"
          fi

      - name: List all files for release
        run: |
          echo "JAR files:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force *.jar || echo "No JAR files in root"
          else
            ls -la *.jar || echo "No JAR files in root"
          fi
          echo "Linux packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force linux-package/ || echo "No Linux packages"
          else
            ls -la linux-package/ || echo "No Linux packages"
          fi
          echo "macOS packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force macos-package/ || echo "No macOS packages"
          else
            ls -la macos-package/ || echo "No macOS packages"
          fi
          echo "Windows packages:"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Get-ChildItem -Force windows-package/ || echo "No Windows packages"
          else
            ls -la windows-package/ || echo "No Windows packages"
          fi

      - name: Extract release notes
        run: |
          echo "## What's Changed" > RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0)^ 2>/dev/null || git rev-list --max-parents=0 HEAD)..$(git describe --tags --abbrev=0) >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

      - name: Create Release
        run: |
          # Find JAR file
          JAR_FILE=$(find . -maxdepth 1 -name "uiTools-*.jar" | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "ERROR: No JAR file found"
            exit 1
          fi
          
          echo "Using JAR file: $JAR_FILE"
          
          # Create an array to hold all assets
          assets=("$JAR_FILE#uiTools-${{ github.ref_name }}.jar")
          
          # Add native packages if they exist
          LINUX_FILE=$(find linux-package -name "*.deb" -type f 2>/dev/null | head -n 1)
          if [ -n "$LINUX_FILE" ]; then
            assets+=("$LINUX_FILE#uiTools-${{ github.ref_name }}-linux.deb")
            echo "Adding Linux package: $LINUX_FILE"
          else
            echo "No Linux package found"
          fi
          
          MACOS_FILE=$(find macos-package -name "*.dmg" -type f 2>/dev/null | head -n 1)
          if [ -n "$MACOS_FILE" ]; then
            assets+=("$MACOS_FILE#uiTools-${{ github.ref_name }}-macos.dmg")
            echo "Adding macOS package: $MACOS_FILE"
          else
            echo "No macOS package found"
          fi
          
          WINDOWS_FILE=$(find windows-package -name "*.exe" -type f 2>/dev/null | head -n 1)
          if [ -n "$WINDOWS_FILE" ]; then
            assets+=("$WINDOWS_FILE#uiTools-${{ github.ref_name }}-windows.exe")
            echo "Adding Windows package: $WINDOWS_FILE"
          else
            echo "No Windows package found"
          fi
          
          echo "All assets to be uploaded:"
          printf '%s\n' "${assets[@]}"
          
          # Create release with all assets that exist
          if [ ${#assets[@]} -gt 1 ]; then
            gh release create ${{ github.ref_name }} \
              --title "Release ${{ github.ref_name }}" \
              --notes-file RELEASE_NOTES.md \
              ${{ contains(github.ref, '-') && '--prerelease' || '' }} \
              "${assets[@]}"
          else
            echo "Only JAR file found, creating release with JAR only"
            gh release create ${{ github.ref_name }} \
              --title "Release ${{ github.ref_name }}" \
              --notes-file RELEASE_NOTES.md \
              ${{ contains(github.ref, '-') && '--prerelease' || '' }} \
              "$JAR_FILE#uiTools-${{ github.ref_name }}.jar"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}